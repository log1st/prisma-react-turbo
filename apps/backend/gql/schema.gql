# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthTokenType {
  token: String!
  expiresAt: DateTime!
  type: AuthTokenTypeEnum!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum AuthTokenTypeEnum {
  bearer
}

type ConfigCountAggregate {
  id: Int!
  initialRoleId: Int!
  createdAt: Int!
  active: Int!
  _all: Int!
}

type ConfigMinAggregate {
  id: String
  initialRoleId: String
  createdAt: DateTime
  active: Boolean
}

type ConfigMaxAggregate {
  id: String
  initialRoleId: String
  createdAt: DateTime
  active: Boolean
}

type PermissionCount {
  permissionsOnRoles: Int!
}

type Permission {
  id: ID!
  namespace: String!
  slug: String!
  permissionsOnRoles: [PermissionsOnRoles!]
  _count: PermissionCount!
}

type PermissionsOnRoles {
  permissionId: String!
  roleId: String!
  permission: Permission!
  role: Role!
}

type User {
  id: ID!
  login: String!
  createdAt: DateTime!
  roleId: String
  role: Role
}

type RoleCount {
  permissionsOnRoles: Int!
  users: Int!
  config: Int!
}

type Role {
  id: ID!
  slug: String!
  createdAt: DateTime!
  permissionsOnRoles: [PermissionsOnRoles!]
  users: [User!]
  config: [Config!]
  _count: RoleCount!
}

type Config {
  id: ID!
  initialRoleId: String
  createdAt: DateTime!
  active: Boolean!
  initialRole: Role
}

type PermissionCountAggregate {
  id: Int!
  namespace: Int!
  slug: Int!
  _all: Int!
}

type PermissionMinAggregate {
  id: String
  namespace: String
  slug: String
}

type PermissionMaxAggregate {
  id: String
  namespace: String
  slug: String
}

type PermissionsOnRolesCountAggregate {
  permissionId: Int!
  roleId: Int!
  _all: Int!
}

type PermissionsOnRolesMinAggregate {
  permissionId: String
  roleId: String
}

type PermissionsOnRolesMaxAggregate {
  permissionId: String
  roleId: String
}

type RoleCountAggregate {
  id: Int!
  slug: Int!
  createdAt: Int!
  _all: Int!
}

type RoleMinAggregate {
  id: String
  slug: String
  createdAt: DateTime
}

type RoleMaxAggregate {
  id: String
  slug: String
  createdAt: DateTime
}

type UserCountAggregate {
  id: Int!
  login: Int!
  createdAt: Int!
  roleId: Int!
  _all: Int!
}

type UserMinAggregate {
  id: String
  login: String
  createdAt: DateTime
  roleId: String
}

type UserMaxAggregate {
  id: String
  login: String
  createdAt: DateTime
  roleId: String
}

type AuthUserType {
  id: ID!
  login: String!
  roleId: String
  role: Role
}

type AuthDataType {
  accessToken: AuthTokenType!
  refreshToken: AuthTokenType!
  data: AuthUserType!
}

type UserPaginationType {
  records: [User!]!
  skip: Float!
  take: Float!
  total: Float!
}

type RolePaginationType {
  records: [Role!]!
  skip: Float!
  take: Float!
  total: Float!
}

type Query {
  me: AuthUserType!
  usersList(query: FindManyUserArgs!): UserPaginationType!
  user(id: String!): User!
  config: Config!
  rolesList(query: FindManyRoleArgs!): RolePaginationType!
  role(id: String!): Role!
  permissions: [Permission!]!
}

input FindManyUserArgs {
  where: UserWhereInput
  orderBy: [UserOrderByWithRelationAndSearchRelevanceInput!]
  cursor: UserWhereUniqueInput
  take: Int
  skip: Int
  distinct: [UserScalarFieldEnum!]
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  login: StringFilter
  password: StringFilter
  createdAt: DateTimeFilter
  roleId: StringNullableFilter
  role: RoleRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  not: NestedStringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  not: NestedStringNullableFilter
}

input RoleRelationFilter {
  is: RoleWhereInput
  isNot: RoleWhereInput
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: StringFilter
  slug: StringFilter
  createdAt: DateTimeFilter
  permissionsOnRoles: PermissionsOnRolesListRelationFilter
  users: UserListRelationFilter
  config: ConfigListRelationFilter
}

input PermissionsOnRolesListRelationFilter {
  every: PermissionsOnRolesWhereInput
  some: PermissionsOnRolesWhereInput
  none: PermissionsOnRolesWhereInput
}

input PermissionsOnRolesWhereInput {
  AND: [PermissionsOnRolesWhereInput!]
  OR: [PermissionsOnRolesWhereInput!]
  NOT: [PermissionsOnRolesWhereInput!]
  permissionId: StringFilter
  roleId: StringFilter
  permission: PermissionRelationFilter
  role: RoleRelationFilter
}

input PermissionRelationFilter {
  is: PermissionWhereInput
  isNot: PermissionWhereInput
}

input PermissionWhereInput {
  AND: [PermissionWhereInput!]
  OR: [PermissionWhereInput!]
  NOT: [PermissionWhereInput!]
  id: StringFilter
  namespace: StringFilter
  slug: StringFilter
  permissionsOnRoles: PermissionsOnRolesListRelationFilter
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input ConfigListRelationFilter {
  every: ConfigWhereInput
  some: ConfigWhereInput
  none: ConfigWhereInput
}

input ConfigWhereInput {
  AND: [ConfigWhereInput!]
  OR: [ConfigWhereInput!]
  NOT: [ConfigWhereInput!]
  id: StringFilter
  initialRoleId: StringNullableFilter
  createdAt: DateTimeFilter
  active: BoolFilter
  initialRole: RoleRelationFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input UserOrderByWithRelationAndSearchRelevanceInput {
  id: SortOrder
  login: SortOrder
  password: SortOrder
  createdAt: SortOrder
  roleId: SortOrder
  role: RoleOrderByWithRelationAndSearchRelevanceInput
  _relevance: UserOrderByRelevanceInput
}

enum SortOrder {
  asc
  desc
}

input RoleOrderByWithRelationAndSearchRelevanceInput {
  id: SortOrder
  slug: SortOrder
  createdAt: SortOrder
  permissionsOnRoles: PermissionsOnRolesOrderByRelationAggregateInput
  users: UserOrderByRelationAggregateInput
  config: ConfigOrderByRelationAggregateInput
  _relevance: RoleOrderByRelevanceInput
}

input PermissionsOnRolesOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input ConfigOrderByRelationAggregateInput {
  _count: SortOrder
}

input RoleOrderByRelevanceInput {
  fields: [RoleOrderByRelevanceFieldEnum!]!
  sort: SortOrder!
  search: String!
}

enum RoleOrderByRelevanceFieldEnum {
  id
  slug
}

input UserOrderByRelevanceInput {
  fields: [UserOrderByRelevanceFieldEnum!]!
  sort: SortOrder!
  search: String!
}

enum UserOrderByRelevanceFieldEnum {
  id
  login
  password
  roleId
}

input UserWhereUniqueInput {
  id: String
  login: String
}

enum UserScalarFieldEnum {
  id
  login
  password
  createdAt
  roleId
}

input FindManyRoleArgs {
  where: RoleWhereInput
  orderBy: [RoleOrderByWithRelationAndSearchRelevanceInput!]
  cursor: RoleWhereUniqueInput
  take: Int
  skip: Int
  distinct: [RoleScalarFieldEnum!]
}

input RoleWhereUniqueInput {
  id: String
  slug: String
}

enum RoleScalarFieldEnum {
  id
  slug
  createdAt
}

type Mutation {
  signIn(payload: AuthSignInDto!): AuthDataType!
  signUp(payload: AuthSignUpDto!): AuthDataType!
  updateUser(input: UserUpdateDto!): User!
  createUser(input: UserCreateDto!): User!
  deleteUsers(ids: [String!]!): Boolean!
  updateConfig(input: ConfigUpdateDto!): Config!
  updateRole(input: RoleUpdateDto!): Role!
  createRole(input: RoleCreateDto!): Role!
  deleteRoles(ids: [String!]!): Boolean!
}

input AuthSignInDto {
  login: String!
  password: String!
}

input AuthSignUpDto {
  login: String!
  password: String!
  passwordConfirmation: String!
}

input UserUpdateDto {
  login: String
  password: String
  roleId: [String!]
  id: String!
}

input UserCreateDto {
  login: String!
  password: String!
  roleId: [String!]
}

input ConfigUpdateDto {
  initialRoleId: String
}

input RoleUpdateDto {
  slug: String
  permissions: [String!]
  id: String!
}

input RoleCreateDto {
  slug: String!
  permissions: [String!]!
}